



TIGRESS                                                         C. Astiz
Internet-Draft                                              A. Pelletier
Intended status: Informational                                 Apple Inc
Expires: 22 August 2023                                 18 February 2023


                 Tigress-GSS API-Sample Implementation
                    draft-tigress-gssapi-impl-latest

Abstract

   This document describes a sample implementation of transferring
   digital credentials securily (Tigress) using GSS API.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://datatracker.ietf.org/doc/draft-tigress-gssapi-impl/.  Status
   information for this document may be found at
   https://datatracker.ietf.org/doc/draft-tigress-gssapi-impl/.

   Source for this draft and an issue tracker can be found at
   https://github.com/dimmyvi/tigress-requirements.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 August 2023.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  GSS-Api Proposal
   4.  Security Considerations
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Prevously Tigress reviewed an implementation of digital credentials
   transfer using Tigress protocol (https://datatracker.ietf.org/doc/
   draft-art-tigress/).  In previous IETF meetings community asked to
   review other possible solutions using alternative standards to
   illustrate how Tigress problem can be solved differently.  In this
   document we are trying to describe how an alternative potential
   implementation of a solution to Tigress [Tigress-req-02] problem of
   transferring digital credentials securily can be done using GSS API
   [RFC2743].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  GSS-Api Proposal

   General security service application program interface, or GSS-API,
   from [RFC2743] defines a generic protocol for the security of
   messages being transferred and can provide authentication, integrity,
   and confidentiality.  GSS-API does not define how the messages are
   sent between parties.

   Leveraging GSS-API provides flexibility to easily change the security
   of how a credential is transferred, but a lot of work to define the
   communication channel between two devices is still required.  GSS-API
   also requires that each party have auth credentials before the
   communication occurs, which isnâ€™t a requirement for our use case.

   ## Secure Credential Transfer with GSS-API

   Because GSS-API does not define the communication channel we will
   assume the devices are able to communicate via an arbitrary
   intermediary server.  An example transfer using GSS-API + Tigress
   could like like:

   1.  Sender creates a single use auth credential and encrypts it with
       a symmetric key that will be a shared secret.

       1.  _Tigress_: The creation, structure, and validation of this
           single use auth credential would need to be defined by
           Tigress.

   2.  Sender creates a GSS-API security context token with the
       encrypted credential.

   3.  Sender sends security context token + shared secret to receiver.

       1.  If a mailbox style intermediate server is used this can be
           done via a url where the shared secret is include in the url
           fragment.

       2.  _Tigress_: How this information is sent to the intermediary
           server would need to be defined by tigress.

   4.  Receiver gets information for communicating with the sender and
       the shared secret.

       1.  This information could be transferred via a url, a file, a QR
           code, etc.

       2.  _Tigress_: The high level format of this information would
           need to be defined by tigress so that devices could parse the
           data and extract the GSS-API specific parts.

       3.  _Tigress:_ We could recommend that this information have a
           nice preview, but that wouldn't be required.

   5.  Receiver accepts the security context token, and uses the shared
       secret to validate the credential.

   6.  Receiver sends back security context token to sender.  This
       process is repeated until the security context is full
       established.

       1.  _Tigress_: How the receiver sends the opaque blob to the
           sender via the intermediary server would need to be defined
           by tigress.

   7.  Sender creates credential to share, use GSS-API to create a
       message token, send message token to receiver.

   8.  Receiver gets message token and uses GSS-API to extract the
       underlying credential.

       1.  If the receiver is done they can terminate the transfer and
           send a GSS-API termination back to the sender.

           1.  _Tigress_: How the session with the intermediary server
               between the sender and receiver is terminated would need
               to be defined by tigress.

       2.  Or, the receiver can perform additional calls with the sender
           to complete transferring the credential.

4.  Security Considerations

   TODO Security

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743,
              DOI 10.17487/RFC2743, January 2000,
              <https://www.rfc-editor.org/rfc/rfc2743>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

6.2.  Informative References

   [Tigress-req-02]
              Vinokurov, D., Pelletier, A., Astiz, C., and B. Lassey,
              "Tigress requirements", February 2023,
              <https://github.com/dimmyvi/tigress-requirements/>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Casey Astiz
   Apple Inc
   Email: castiz@apple.com


   Alex Pelletier
   Apple Inc
   Email: a_pelletier@apple.com
